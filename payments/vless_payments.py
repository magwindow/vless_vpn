import html
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy import select
from database.models import async_session, PaymentRecord
from keyboards.payment_keyboard import get_payment_methods_keyboard, get_confirm_payment_keyboard, check_pay
from data_storage import tariff_selection
from payments.heleket_pay import create_heleket_invoice
from payments.yookassa_pay import create_payment, check_payment_and_send_key

vless_payment_router = Router()

TARIFFS_VLESS = {
    "month": 199,
    "three_month": 549,
    "six_month": 1299,
    "year": 2799
}

TARIFF_NAMES = {
    "month": "<b>199‚ÇΩ/(1 –º–µ—Å—è—Ü)</b>",
    "three_month": "<b>549‚ÇΩ/(3 –º–µ—Å—è—Ü–∞)</b>",
    "six_month": "<b>1299‚ÇΩ/(6 –º–µ—Å—è—Ü–µ–≤)</b>",
    "year": "<b>2799‚ÇΩ/(1 –≥–æ–¥)</b>"
}


@vless_payment_router.callback_query(F.data.in_(TARIFFS_VLESS.keys()))
async def handle_tariff_selection(call: CallbackQuery):
    tariff_code = call.data
    tariff_selection[call.from_user.id] = tariff_code

    name = TARIFF_NAMES.get(tariff_code, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")

    await call.message.edit_text(
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ *{name}* –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ:",
        reply_markup=await get_payment_methods_keyboard(back_callback="traffic")
    )


@vless_payment_router.callback_query(F.data == "check_payment")
async def manual_check(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(PaymentRecord).where(
                PaymentRecord.user_id == user_id,
                PaymentRecord.is_paid == False
            ).order_by(PaymentRecord.id.desc()).limit(1)
        )
        payment_record = result.scalar_one_or_none()

    if payment_record:
        await check_payment_and_send_key(payment_record.payment_id, user_id, callback.bot)
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É...", show_alert=False)
    else:
        await callback.message.answer("‚ùóÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")


@vless_payment_router.callback_query(F.data == "pay_card")
async def pay_card(call: CallbackQuery):
    user_id = call.from_user.id
    tariff_key = tariff_selection.get(user_id, "month")
    amount = TARIFFS_VLESS.get(tariff_key, 199)

    if amount is None:
        await call.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    payment_url = create_payment(amount, call.from_user.id, tariff_key)
    await call.message.answer(
        f"üí∏ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}",
        reply_markup=await check_pay(),
        disable_web_page_preview=True
    )


@vless_payment_router.callback_query(F.data == "pay_crypto")
async def pay_crypto(call: CallbackQuery):
    user_id = call.from_user.id
    tariff_code = tariff_selection.get(user_id, "month")
    # print(f"[DEBUG] –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {tariff_code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    rub_amount = TARIFFS_VLESS.get(tariff_code, 199)
    # print(f"[DEBUG] –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π. –¢–∞—Ä–∏—Ñ: {tariff_code}, RUB: {rub_amount}")

    try:
        invoice_link = await create_heleket_invoice(rub_amount, user_id=user_id, tariff_name=tariff_code)

        await call.message.answer(
            f"üí∏ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞:\n{invoice_link}\n\n"
            f"‚ùóÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª",
            reply_markup=await get_confirm_payment_keyboard()
        )
    except Exception as e:
        await call.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: <pre>{html.escape(str(e))}</pre>")
