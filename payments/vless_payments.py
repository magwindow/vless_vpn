from aiogram import Router, F
from aiogram.types import CallbackQuery, Message

from keyboards.menu_keyboard import tariff_keyboard, main_keyboard
from keyboards.payment_keyboard import get_payment_methods_keyboard, get_confirm_payment_keyboard
from data_storage import pending_users, waiting_for_payment, tariff_selection
from tg_admin import ADMIN_IDS
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from vless.vless_service import add_client

vless_payment_router = Router()

INBOUND_ID = 1
FLOW = "xtls-rprx-vision"

TARIFFS_VLESS = {
    "month": 199,
    "three_month": 549,
    "six_month": 1299,
    "year": 2799
}


def get_admin_confirmation_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ])


@vless_payment_router.callback_query(F.data == "confirm_payment")
async def confirm_payment(call: CallbackQuery):
    pending_users.add(call.from_user.id)
    await call.message.answer("‚åõ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@vless_payment_router.callback_query(F.data.startswith("confirm_"))
async def confirm_user_payment(call: CallbackQuery):
    try:
        user_id = int(call.data.split("_")[1])
    except (IndexError, ValueError):
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.")
        return

    if user_id not in pending_users:
        await call.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    tariff = tariff_selection.get(user_id, "month")

    tariffs = {
        "month": {"gb": 100, "days": 30},
        "three_month": {"gb": 300, "days": 90},
        "six_month": {"gb": 600, "days": 180},
        "year": {"gb": 9999, "days": 365},
    }

    try:
        t = tariffs[tariff]
        key = await add_client(
            inbound_id=INBOUND_ID,
            total_gb=t["gb"],
            expiry_days=t["days"],
            flow=FLOW,
            chat_id=user_id,
            user_name=None  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à VLESS –∫–ª—é—á:\n\n<code>{key.access_url}</code>\n"
            f"üìÖ –°—Ä–æ–∫: –¥–æ {key.expires_at.strftime('%Y-%m-%d')}",
            reply_markup=await tariff_keyboard()
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
        await call.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ö–ª—é—á –≤—ã–¥–∞–Ω.",
                                  reply_markup=await main_keyboard())
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞: {str(e)}", reply_markup=await tariff_keyboard())

    # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pending_users.remove(user_id)
    waiting_for_payment.pop(user_id, None)
    tariff_selection.pop(user_id, None)


@vless_payment_router.callback_query(F.data.startswith("reject_"))
async def reject_user_payment(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])

    if user_id not in pending_users:
        await call.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.bot.send_message(
            user_id,
            "‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞
        await call.message.edit_caption(
            f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )

    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {str(e)}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    pending_users.remove(user_id)
    waiting_for_payment.pop(user_id, None)
    tariff_selection.pop(user_id, None)


TARIFF_NAMES = {
    "month": "<b>199‚ÇΩ/(1 –º–µ—Å—è—Ü)</b>",
    "three_month": "<b>549‚ÇΩ/(3 –º–µ—Å—è—Ü–∞)</b>",
    "six_month": "<b>1299‚ÇΩ/(6 –º–µ—Å—è—Ü–µ–≤)</b>",
    "year": "<b>2799‚ÇΩ/(1 –≥–æ–¥)</b>"
}


@vless_payment_router.callback_query(F.data.in_(TARIFFS_VLESS.keys()))
async def handle_tariff_selection(call: CallbackQuery):
    tariff_code = call.data
    tariff_selection[call.from_user.id] = tariff_code

    name = TARIFF_NAMES.get(tariff_code, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")

    await call.message.edit_text(
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ *{name}* –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ:",
        reply_markup=await get_payment_methods_keyboard(back_callback="traffic")
    )


@vless_payment_router.callback_query(F.data == "pay_card")
async def pay_card(call: CallbackQuery):
    tariff = tariff_selection.get(call.from_user.id, "month")
    price = TARIFFS_VLESS.get(tariff, 349)
    await call.message.answer(
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{price}‚ÇΩ</b> –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞:\n\n<b>2200 7001 4268 8075</b>\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´<b>–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª</b>", reply_markup=await get_confirm_payment_keyboard()
    )


@vless_payment_router.callback_query(F.data == "pay_sbp")
async def pay_sbp(call: CallbackQuery):
    tariff = tariff_selection.get(call.from_user.id, "month")
    price = TARIFFS_VLESS.get(tariff, 349)
    await call.message.answer(
        f"üì≤ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{price}‚ÇΩ</b> –ø–æ –°–ë–ü –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞:\n\n<b>+79966163393</b>\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª</b>", reply_markup=await get_confirm_payment_keyboard()
    )


@vless_payment_router.message(F.photo)
async def handle_screenshot(message: Message):
    user_id = message.from_user.id
    # print(f"[DEBUG] reply_markup: {get_admin_confirmation_keyboard_vless(user_id).inline_keyboard}")
    # print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º: confirm_{user_id}")
    file_id = message.photo[-1].file_id

    pending_users.add(user_id)
    waiting_for_payment[user_id] = file_id

    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    for admin_id in ADMIN_IDS:
        await message.bot.send_photo(
            admin_id,
            file_id,
            caption=f"üì∏ –û–ø–ª–∞—Ç–∞ –æ—Ç <b>{message.from_user.full_name}</b> (ID: <code>{user_id}</code>) [VLESS]",
            reply_markup=get_admin_confirmation_keyboard(user_id)
        )
